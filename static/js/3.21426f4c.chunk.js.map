{"version":3,"sources":["components/Othep-tabs/Dialogs/Message/MessageItem.jsx","components/Othep-tabs/Dialogs/Dialog/DialogItem.jsx","components/Othep-tabs/Dialogs/Dialogs.jsx","redux/dialogsPage-selector.js","components/Othep-tabs/Dialogs/Dialogs-Conteiner.jsx"],"names":["MessageItem","props","key","id","className","message","DialogItem","path","src","to","name","AddMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","type","placeholder","Dialogs","pathDialog","pathMessage","dialog","map","d","el","sendNewMessegeUserDis","newMessage","getdialogs","state","dialogsPage","dialogs","getmessages","messages","compose","authRendering","connect","dispatch","text","addMessageActionCreater"],"mappings":"kKAYeA,G,OAPK,SAACC,GACjB,OAAQ,6BACJ,yBAAKC,IAAKD,EAAME,GAAIC,UAAU,WAAU,2BAAIH,EAAMI,a,QCK3CC,EAPI,SAAAL,GACf,IAAIM,EAAO,YAAeN,EAAME,GAChC,OACI,4BAAI,yBAAMK,IAAI,0GAA0G,kBAAC,IAAD,CAAUC,GAAIF,GAAON,EAAMS,Q,iBCWvJC,EAAiBC,YAAU,CAACC,KAAK,eAAhBD,EAVF,SAACX,GAChB,OACI,6BACA,0BAAMa,SAAUb,EAAMc,aAAcX,UAAU,8BAC1C,kBAACY,EAAA,EAAD,CAAOZ,UAAU,qBAAqBM,KAAK,aAAaO,UAAU,QAAQC,KAAK,OAAOC,YAAY,gBAClG,4BAAQf,UAAU,kBAAlB,aA+CGgB,EAxCC,SAACnB,GACb,IAAIoB,EAAapB,EAAMoB,WACnBC,EAAcrB,EAAMqB,YAEpBC,EAASF,EAAWG,KAAI,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAAYvB,IAAKuB,EAAEtB,GAAIO,KAAMe,EAAEf,KAAMP,GAAIsB,EAAEtB,QACzEE,EAAUiB,EAAYE,KAAI,SAAAE,GAAE,OAAI,kBAAC,EAAD,CAAaxB,IAAKwB,EAAGvB,GAAIE,QAASqB,EAAGrB,QAASF,GAAIuB,EAAGvB,QAQzF,OACI,yBAAKC,UAAU,eACX,uCAEA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,4BACKmB,GAEL,0BAAMnB,UAAU,cAGpB,yBAAKA,UAAU,YACXC,EAEA,yBAAKD,UAAU,8BACX,kBAACO,EAAD,CAAgBG,SApBrB,SAACT,GACZJ,EAAM0B,sBAAsBtB,EAAQuB,oB,wBC/B/BC,EAAa,SAACC,GACvB,OAAOA,EAAMC,YAAYC,SAEhBC,EAAc,SAACH,GACxB,OAAOA,EAAMC,YAAYG,UC2BdC,sBACXC,IACAC,aArBe,SAACP,GAChB,MAAO,CACHT,WAAYQ,EAAWC,GACvBR,YAAaW,EAAYH,OAIb,SAACQ,GACjB,MAAO,CACHX,sBAAwB,SAACY,GACrBD,EAASE,YAAwBD,SAS9BJ,CAGbf","file":"static/js/3.21426f4c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport  '../Dialogs.css'\r\n\r\n\r\nconst MessageItem = (props) => {\r\n    return (<div>\r\n        <div key={props.id} className=\"message\"><p>{props.message}</p></div>\r\n    </div>)\r\n    \r\n}\r\n\r\nexport default MessageItem","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport  '../Dialogs.css'\r\n\r\nconst DialogItem = props =>  {\r\n    let path = \"/message/\"  + props.id\r\n    return (\r\n        <li><img  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQQiyck_uo4zjgEZha6ZrigsZFCFu7FWEvM4Q&usqp=CAU\" /><NavLink  to={path}>{props.name}</NavLink></li>\r\n    )}\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\n\r\nimport  './Dialogs.css'\r\nimport MessageItem from './Message/MessageItem';\r\nimport DialogItem from './Dialog/DialogItem';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\n\r\n\r\nconst AddMessage = (props) => {\r\n    return (\r\n        <div>\r\n        <form onSubmit={props.handleSubmit} className=\"messagу-sending_field\">\r\n            <Field className=\"field-message-text\" name=\"newMessage\" component=\"input\" type=\"text\" placeholder=\"new Message\"/>\r\n            <button className=\"button-message\">SEND</button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\nlet AddMessageForm = reduxForm({form:\"sendMessage\"})(AddMessage)\r\n\r\nconst Dialogs = (props) => {\r\n    let pathDialog = props.pathDialog   \r\n    let pathMessage = props.pathMessage\r\n\r\n    let dialog = pathDialog.map(d =>  <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let message = pathMessage.map(el => <MessageItem key={el.id} message={el.message} id={el.id}/>)\r\n\r\n\r\n\r\n    let onSubmit = (message)=> {\r\n        props.sendNewMessegeUserDis(message.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className=\"tab-Message\">\r\n            <h1>DIALOGS</h1>\r\n\r\n            <div className=\"Dialogs\">\r\n                <div className=\"dialog\">\r\n                    <ul>\r\n                        {dialog}\r\n                    </ul>\r\n                    <span className=\"line-frf\"></span>\r\n                </div>\r\n\r\n                <div className=\"Messages\">\r\n                   {message}\r\n\r\n                    <div className=\"messagу-sending_field\">\r\n                        <AddMessageForm onSubmit={onSubmit}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs","export const getdialogs = (state) => {\r\n    return state.dialogsPage.dialogs\r\n}\r\nexport const getmessages = (state) => {\r\n    return state.dialogsPage.messages\r\n}\r\n\r\n\r\n","\r\n\r\nimport { addMessageActionCreater } from '../../../redux/dialogsPage_Reducer.js';\r\nimport Dialogs from './Dialogs.jsx';\r\nimport { connect } from 'react-redux';\r\nimport { authRendering } from '../../../Hoc/Hoc.jsx';\r\nimport { compose } from 'redux';\r\nimport { getdialogs, getmessages } from '../../../redux/dialogsPage-selector.js';\r\n\r\n\r\n\r\n\r\nlet dialogsState = (state) => {\r\n    return {\r\n        pathDialog: getdialogs(state),\r\n        pathMessage: getmessages(state),\r\n    }\r\n}\r\n\r\nlet addFuncdialog = (dispatch) => {\r\n    return {\r\n        sendNewMessegeUserDis : (text) => {\r\n            dispatch(addMessageActionCreater(text))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    authRendering,\r\n    connect(dialogsState, addFuncdialog)\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const DialogsConteiner = () => {\r\n  \r\n \r\n//     return (   \r\n//     <StoreContext.Consumer>\r\n        \r\n//         {\r\n//             (store) => {\r\n//                 let pathDialog = store.getState().dialogsPage.dialogs\r\n//                 let pathMessage = store.getState().dialogsPage.messages\r\n//                 let newMessageText = store.getState().dialogsPage.newMessageText\r\n            \r\n            \r\n            \r\n//                 let  sendNewMessegeUser = () => {\r\n//                     store.dispatch(addMessageActionCreater())\r\n//                 }\r\n                \r\n//                 let newMessage = (body) => {\r\n//                     store.dispatch(updateTextMessageActionCreater(body))\r\n//                 }\r\n\r\n//                 return (\r\n//                     <Dialogs pathDialog={ pathDialog } \r\n//                     pathMessage={ pathMessage } \r\n//                     sendNewMessegeUser={ sendNewMessegeUser }  \r\n//                     newMessage={ newMessage }\r\n//                     newMessageText={ newMessageText }/> \r\n//                 )\r\n//             }\r\n//         }\r\n\r\n//     </StoreContext.Consumer>\r\n//     )\r\n// }"],"sourceRoot":""}